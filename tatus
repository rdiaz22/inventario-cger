[1mdiff --git a/AUDIT_SYSTEM.sql b/AUDIT_SYSTEM.sql[m
[1mnew file mode 100644[m
[1mindex 0000000..28b538e[m
[1m--- /dev/null[m
[1m+++ b/AUDIT_SYSTEM.sql[m
[36m@@ -0,0 +1,105 @@[m
[32m+[m[32m-- Script para crear el sistema de auditorías en Supabase[m
[32m+[m[32m-- Ejecutar este SQL en el SQL Editor de Supabase[m
[32m+[m
[32m+[m[32m-- Tabla principal de auditorías[m
[32m+[m[32mCREATE TABLE IF NOT EXISTS audits ([m
[32m+[m[32m    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,[m
[32m+[m[32m    name VARCHAR(255) NOT NULL,[m
[32m+[m[32m    description TEXT,[m
[32m+[m[32m    status VARCHAR(50) DEFAULT 'Pendiente' CHECK (status IN ('Pendiente', 'En Progreso', 'Completada', 'Cancelada')),[m
[32m+[m[32m    auditor_id UUID REFERENCES auth.users(id),[m
[32m+[m[32m    start_date DATE NOT NULL,[m
[32m+[m[32m    end_date DATE,[m
[32m+[m[32m    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),[m
[32m+[m[32m    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()[m
[32m+[m[32m);[m
[32m+[m
[32m+[m[32m-- Tabla de listas de verificación para auditorías[m
[32m+[m[32mCREATE TABLE IF NOT EXISTS audit_checklists ([m
[32m+[m[32m    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,[m
[32m+[m[32m    audit_id UUID REFERENCES audits(id) ON DELETE CASCADE,[m
[32m+[m[32m    name VARCHAR(255) NOT NULL,[m
[32m+[m[32m    description TEXT,[m
[32m+[m[32m    order_index INTEGER DEFAULT 0,[m
[32m+[m[32m    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()[m
[32m+[m[32m);[m
[32m+[m
[32m+[m[32m-- Tabla de elementos de verificación[m
[32m+[m[32mCREATE TABLE IF NOT EXISTS audit_checklist_items ([m
[32m+[m[32m    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,[m
[32m+[m[32m    checklist_id UUID REFERENCES audit_checklists(id) ON DELETE CASCADE,[m
[32m+[m[32m    description TEXT NOT NULL,[m
[32m+[m[32m    is_required BOOLEAN DEFAULT true,[m
[32m+[m[32m    order_index INTEGER DEFAULT 0,[m
[32m+[m[32m    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()[m
[32m+[m[32m);[m
[32m+[m
[32m+[m[32m-- Tabla de resultados de auditoría por activo[m
[32m+[m[32mCREATE TABLE IF NOT EXISTS audit_results ([m
[32m+[m[32m    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,[m
[32m+[m[32m    audit_id UUID REFERENCES audits(id) ON DELETE CASCADE,[m
[32m+[m[32m    asset_id UUID REFERENCES assets(id) ON DELETE CASCADE,[m
[32m+[m[32m    checklist_item_id UUID REFERENCES audit_checklist_items(id) ON DELETE CASCADE,[m
[32m+[m[32m    status VARCHAR(50) DEFAULT 'Pendiente' CHECK (status IN ('Pendiente', 'Aprobado', 'Rechazado', 'Observación')),[m
[32m+[m[32m    notes TEXT,[m
[32m+[m[32m    auditor_id UUID REFERENCES auth.users(id),[m
[32m+[m[32m    checked_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),[m
[32m+[m[32m    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()[m
[32m+[m[32m);[m
[32m+[m
[32m+[m[32m-- Tabla de hallazgos de auditoría[m
[32m+[m[32mCREATE TABLE IF NOT EXISTS audit_findings ([m
[32m+[m[32m    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,[m
[32m+[m[32m    audit_id UUID REFERENCES audits(id) ON DELETE CASCADE,[m
[32m+[m[32m    asset_id UUID REFERENCES assets(id) ON DELETE CASCADE,[m
[32m+[m[32m    severity VARCHAR(50) DEFAULT 'Baja' CHECK (severity IN ('Baja', 'Media', 'Alta', 'Crítica')),[m
[32m+[m[32m    description TEXT NOT NULL,[m
[32m+[m[32m    recommendation TEXT,[m
[32m+[m[32m    status VARCHAR(50) DEFAULT 'Abierto' CHECK (status IN ('Abierto', 'En Progreso', 'Resuelto', 'Cerrado')),[m
[32m+[m[32m    assigned_to VARCHAR(255),[m
[32m+[m[32m    due_date DATE,[m
[32m+[m[32m    resolved_at TIMESTAMP WITH TIME ZONE,[m
[32m+[m[32m    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),[m
[32m+[m[32m    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()[m
[32m+[m[32m);[m
[32m+[m
[32m+[m[32m-- Crear índices para mejorar el rendimiento[m
[32m+[m[32mCREATE INDEX IF NOT EXISTS idx_audits_status ON audits(status);[m
[32m+[m[32mCREATE INDEX IF NOT EXISTS idx_audits_auditor_id ON audits(auditor_id);[m
[32m+[m[32mCREATE INDEX IF NOT EXISTS idx_audits_dates ON audits(start_date, end_date);[m
[32m+[m[32mCREATE INDEX IF NOT EXISTS idx_audit_results_audit_id ON audit_results(audit_id);[m
[32m+[m[32mCREATE INDEX IF NOT EXISTS idx_audit_results_asset_id ON audit_results(asset_id);[m
[32m+[m[32mCREATE INDEX IF NOT EXISTS idx_audit_findings_audit_id ON audit_findings(audit_id);[m
[32m+[m[32mCREATE INDEX IF NOT EXISTS idx_audit_findings_severity ON audit_findings(severity);[m
[32m+[m[32mCREATE INDEX IF NOT EXISTS idx_audit_findings_status ON audit_findings(status);[m
[32m+[m
[32m+[m[32m-- Crear función para actualizar updated_at automáticamente[m
[32m+[m[32mCREATE OR REPLACE FUNCTION update_updated_at_column()[m
[32m+[m[32mRETURNS TRIGGER AS $$[m
[32m+[m[32mBEGIN[m
[32m+[m[32m    NEW.updated_at = NOW();[m
[32m+[m[32m    RETURN NEW;[m
[32m+[m[32mEND;[m
[32m+[m[32m$$ language 'plpgsql';[m
[32m+[m
[32m+[m[32m-- Crear triggers para updated_at[m
[32m+[m[32mCREATE TRIGGER update_audits_updated_at BEFORE UPDATE ON audits[m
[32m+[m[32m    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();[m
[32m+[m
[32m+[m[32mCREATE TRIGGER update_audit_findings_updated_at BEFORE UPDATE ON audit_findings[m
[32m+[m[32m    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();[m
[32m+[m
[32m+[m[32m-- Insertar datos de ejemplo para categorías de auditoría[m
[32m+[m[32mINSERT INTO categories (name) VALUES[m[41m [m
[32m+[m[32m    ('Auditoría de Inventario'),[m
[32m+[m[32m    ('Auditoría de Seguridad'),[m
[32m+[m[32m    ('Auditoría de Mantenimiento'),[m
[32m+[m[32m    ('Auditoría de Cumplimiento')[m
[32m+[m[32mON CONFLICT (name) DO NOTHING;[m
[32m+[m
[32m+[m[32m-- Comentarios para documentación[m
[32m+[m[32mCOMMENT ON TABLE audits IS 'Tabla principal de auditorías del sistema';[m
[32m+[m[32mCOMMENT ON TABLE audit_checklists IS 'Listas de verificación para cada auditoría';[m
[32m+[m[32mCOMMENT ON TABLE audit_checklist_items IS 'Elementos individuales de verificación';[m
[32m+[m[32mCOMMENT ON TABLE audit_results IS 'Resultados de verificación por activo y elemento';[m
[32m+[m[32mCOMMENT ON TABLE audit_findings IS 'Hallazgos y observaciones de auditoría';[m
[1mdiff --git a/EPI_RLS_POLICIES.sql b/EPI_RLS_POLICIES.sql[m
[1mnew file mode 100644[m
[1mindex 0000000..6d8b3bb[m
[1m--- /dev/null[m
[1m+++ b/EPI_RLS_POLICIES.sql[m
[36m@@ -0,0 +1,121 @@[m
[32m+[m[32m-- =====================================================[m
[32m+[m[32m-- POLÍTICAS RLS PARA TABLAS DE EPIs[m
[32m+[m[32m-- Ejecutar este SQL en Supabase SQL Editor[m
[32m+[m[32m-- =====================================================[m
[32m+[m
[32m+[m[32m-- Habilitar RLS en las tablas de EPIs[m
[32m+[m[32mALTER TABLE epi_assets ENABLE ROW LEVEL SECURITY;[m
[32m+[m[32mALTER TABLE epi_sizes ENABLE ROW LEVEL SECURITY;[m
[32m+[m
[32m+[m[32m-- =====================================================[m
[32m+[m[32m-- POLÍTICAS PARA epi_assets[m
[32m+[m[32m-- =====================================================[m
[32m+[m
[32m+[m[32m-- Política de lectura (todos pueden leer EPIs)[m
[32m+[m[32mCREATE POLICY "epi_assets_select_policy" ON epi_assets[m
[32m+[m[32m    FOR SELECT USING (true);[m
[32m+[m
[32m+[m[32m-- Política de inserción (solo usuarios con permisos de activos)[m
[32m+[m[32mCREATE POLICY "epi_assets_insert_policy" ON epi_assets[m
[32m+[m[32m    FOR INSERT WITH CHECK ([m
[32m+[m[32m        EXISTS ([m
[32m+[m[32m            SELECT 1 FROM system_users su[m
[32m+[m[32m            JOIN user_roles ur ON su.role_id = ur.id[m
[32m+[m[32m            WHERE su.id = auth.uid()[m[41m [m
[32m+[m[32m            AND (ur.permissions->>'all')::boolean = true[m
[32m+[m[32m            OR (ur.permissions->>'assets')::boolean = true[m
[32m+[m[32m        )[m
[32m+[m[32m